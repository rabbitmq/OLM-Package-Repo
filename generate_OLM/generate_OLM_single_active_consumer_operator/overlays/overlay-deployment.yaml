#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ clusterserviceversion = overlay.subset({"kind": "ClusterServiceVersion"})
#@ cluster_operator = overlay.subset({"metadata": {"name": "rabbitmq-single-active-consumer-operator.v0.2.2"}})
#@overlay/match by=overlay.and_op(clusterserviceversion, cluster_operator),expects="1+"
---
spec:
  install:
    spec:
      deployments:
        #@overlay/match by=overlay.subset({"name": "single-active-consumer-operator-controller-manager"}),expects="1+"
        -
          #@overlay/match missing_ok=True
          spec:
            replicas: 1
            selector:
              matchLabels:
                app.kubernetes.io/component: rabbitmq-operator
                app.kubernetes.io/name: single-active-consumer-operator
                app.kubernetes.io/part-of: rabbitmq
                control-plane: controller-manager
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  app.kubernetes.io/component: rabbitmq-operator
                  app.kubernetes.io/name: single-active-consumer-operator
                  app.kubernetes.io/part-of: rabbitmq
                  control-plane: controller-manager
              spec:
                containers:
                - args:
                  - --config=controller_manager_config.yaml
                  command:
                  - /manager
                  env:
                  - name: OPERATOR_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  image: rabbitmqoperator/single-active-consumer-operator:0.2.2
                  livenessProbe:
                    httpGet:
                      path: /healthz
                      port: 8081
                    initialDelaySeconds: 15
                    periodSeconds: 20
                  name: manager
                  ports:
                  - containerPort: 9443
                    name: webhook-server
                    protocol: TCP
                  readinessProbe:
                    httpGet:
                      path: /readyz
                      port: 8081
                    initialDelaySeconds: 5
                    periodSeconds: 10
                  resources:
                    limits:
                      cpu: 300m
                      memory: 500Mi
                    requests:
                      cpu: 100m
                      memory: 100Mi
                  securityContext:
                    allowPrivilegeEscalation: false
                  volumeMounts:
                  - mountPath: /tmp/k8s-webhook-server/serving-certs
                    name: cert
                    readOnly: true
                  - mountPath: /controller_manager_config.yaml
                    name: manager-config
                    subPath: controller_manager_config.yaml
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: single-active-consumer-operator-controller-manager
                terminationGracePeriodSeconds: 10
                volumes:
                - name: cert
                  secret:
                    defaultMode: 420
                    secretName: sac-webhook-server-cert
                - configMap:
                    name: single-active-consumer-operator-manager-config
                  name: manager-config
